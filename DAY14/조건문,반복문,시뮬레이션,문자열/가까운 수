Description
정수 배열 array와 정수 n이 매개변수로 주어질 때, array에 들어있는 정수 중 n과 가장 가까운 수를 return 하도록 solution 함수를 완성해주세요.

제한사항
1 ≤ array의 길이 ≤ 100
1 ≤ array의 원소 ≤ 100
1 ≤ n ≤ 100
가장 가까운 수가 여러 개일 경우 더 작은 수를 return 합니다.
입출력 예
array	n	result
[3, 10, 28]	20	28
[10, 11, 12]	13	12
입출력 예 설명
입출력 예 #1

3, 10, 28 중 20과 가장 가까운 수는 28입니다.
입출력 예 #2

10, 11, 12 중 13과 가장 가까운 수는 12입니다.

SOLUTION

import java.util.*;
import java.math.*;

class Solution {
    public int solution(int[] array, int n) {
        int answer = 0;
        
        int[] diffArr = new int[array.length];
        
        for(int i = 0; i < array.length; i++){
            diffArr[i] = Math.abs(n - array[i]);
        }
        
        Arrays.sort(diffArr);
        
        answer = diffArr[diffArr.length - 1] + n;
        
        return answer;
    }
}
Test 1
Input 〉	[3, 10, 28], 20
Expected 〉	28
Result 〉	실행한 결괏값 37이 기댓값 28과 다릅니다.
Test 2
Input 〉	[10, 11, 12], 13
Expected 〉	12
Result 〉	실행한 결괏값 16이 기댓값 12과 다릅니다.

정답이 아닌 이유
=> diffArr 배열을 정렬 한후 그 값을 answer에 할당하는 방식에 문제가 있어서.

다시 고친 후
  import java.util.*;

class Solution {
    public int solution(int[] array, int n) {
        int answer = array[0]; 
        int minDiff = Math.abs(n - array[0]); 
        
        for(int i = 1; i < array.length; i++) {
            
            int diff = Math.abs(n - array[i]);
            
            if (diff < minDiff || (diff == minDiff && array[i] < answer)) {
                
                minDiff = diff;
                answer = array[i];
            }
        }
        
        return answer;
    }
}

다른 사람 풀이
1. index 0에 최소 차이를 갖는 값을 loop 돌며 계속 저장, loop 종료후, index 0의 value return
import java.util.*;

class Solution {
    public int solution(int[] array, int n) {
        int answer = 0;
        Arrays.sort(array);
        for(int i = 1 ; i < array.length ; i++){
            if(Math.abs(n-array[0]) > Math.abs(n-array[i])){
                array[0] = array[i];
            }
        }
        answer = array[0];
        return answer;
    }
}

