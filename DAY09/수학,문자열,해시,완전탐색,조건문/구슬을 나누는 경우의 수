Description
머쓱이는 구슬을 친구들에게 나누어주려고 합니다. 구슬은 모두 다르게 생겼습니다. 머쓱이가 갖고 있는 구슬의 개수 balls와 친구들에게 나누어 줄 구슬 개수 share이 매개변수로 주어질 때, balls개의 구슬 중 share개의 구슬을 고르는 가능한 모든 경우의 수를 return 하는 solution 함수를 완성해주세요.

제한사항
1 ≤ balls ≤ 30
1 ≤ share ≤ 30
구슬을 고르는 순서는 고려하지 않습니다.
share ≤ balls
입출력 예
balls	share	result
3	2	3
5	3	10

서로 다른 구슬 5개 중 3개를 고르는 경우의 수는 10입니다.

solution

class Solution {
    public int solution(int balls, int share) {
        int answer = 0;
        
        answer = factorial(balls) / (factorial(share) * factorial(balls - share));
        
        return answer;
    }
    
    private int factorial(int n){
        if(n == 1){
            return 1;
        }
        return n * factorial(n -1);
    }
}

하....^^....
Test 1 〉	통과 (0.02ms, 73.1MB)
Test 2 〉	실패 (런타임 에러)
Test 3 〉	실패 (런타임 에러)
Test 4 〉	통과 (0.02ms, 83.4MB)
Test 5 〉	실패 (0.03ms, 76.7MB)
Test 6 〉	실패 (0.04ms, 64.7MB)
Test 7 〉	실패 (0.04ms, 78.9MB)
Test 8 〉	통과 (0.02ms, 81.4MB)
Test 9 〉	통과 (0.02ms, 74.9MB)
Test 10 〉	통과 (0.03ms, 84MB)
Test 11 〉	통과 (0.03ms, 82.4MB)
Test 12 〉	통과 (0.02ms, 75MB)
Test 13 〉	통과 (0.03ms, 77.2MB)
Test 14 〉	통과 (0.02ms, 78MB)
Test 15 〉	통과 (0.03ms, 66MB)
Test 16 〉	통과 (0.03ms, 80.4MB)
Test 17 〉	통과 (0.02ms, 74.4MB)
Test 18 〉	실패 (0.05ms, 75.5MB)
Test 19 〉	실패 (0.02ms, 64.7MB)
Test 20 〉	실패 (0.03ms, 75.8MB)
Test 21 〉	실패 (0.03ms, 73.6MB)
Test 22 〉	실패 (0.03ms, 87.5MB)
Test 23 〉	실패 (0.03ms, 73.4MB)
Test 24 〉	실패 (런타임 에러)
Test 25 〉	실패 (0.02ms, 71.6MB)
Test 26 〉	실패 (0.02ms, 72.7MB)
Test 27 〉	실패 (0.04ms, 79.4MB)
Test 28 〉	실패 (0.03ms, 73.1MB)
Test 29 〉	실패 (0.03ms, 75.6MB)
Test 30 〉	실패 (0.02ms, 76.2MB)
Test 31 〉	실패 (0.03ms, 85.5MB)
Test 32 〉	실패 (0.03ms, 75.3MB)
Test 33 〉	실패 (0.02ms, 76.1MB)
Test 34 〉	실패 (0.02ms, 82.3MB)
Test 35 〉	실패 (0.02ms, 77.3MB)
Submission result
정확성: 34.3
Total score: 34.3 / 100.0

실환지....ㅋㅋㅋㅋㅋ어쩐지 룰루랄라 풀리더라니ㅋㅋ

error 이유
1. 팩토리얼 계산에서의 오버플로우 : 30!을 계산하게 되면 int 타입의 최대값을 넘어간다.
2. 팩토리얼 함수의 종료 조건 : n = 0일 때도 고려해야 한다. factorial(0)을 호출하게 되면 무한 재귀 호출이 발생

=> factorial 함수의 타입을 long으로 선언함
=> n = 0 을 하게 되면 1을 반환하도록 조건을 추가함.
class Solution {
    public int solution(int balls, int share) {
        
        return (int)(factorial(balls) / (factorial(share) * factorial(balls - share)));
    }
    
    private long factorial(int n){
        if(n == 0 || n == 1){
            return 1;
        }
        return n * factorial(n -1);
    }
}
채점을 시작합니다.
정확성  테스트
Test 1 〉	통과 (0.04ms, 81.9MB)
Test 2 〉	통과 (0.01ms, 72.8MB)
Test 3 〉	통과 (0.02ms, 75.5MB)
Test 4 〉	통과 (0.03ms, 69.6MB)
Test 5 〉	실패 (0.03ms, 73.6MB)
Test 6 〉	실패 (0.04ms, 73.1MB)
Test 7 〉	실패 (0.03ms, 75.9MB)
Test 8 〉	통과 (0.02ms, 73.3MB)
Test 9 〉	통과 (0.01ms, 76.1MB)
Test 10 〉	통과 (0.02ms, 73.5MB)
Test 11 〉	통과 (0.03ms, 73.6MB)
Test 12 〉	통과 (0.03ms, 68.1MB)
Test 13 〉	통과 (0.03ms, 73.3MB)
Test 14 〉	통과 (0.02ms, 82.6MB)
Test 15 〉	통과 (0.03ms, 76.4MB)
Test 16 〉	통과 (0.04ms, 74MB)
Test 17 〉	통과 (0.03ms, 82.3MB)
Test 18 〉	통과 (0.03ms, 75.3MB)
Test 19 〉	통과 (0.02ms, 74MB)
Test 20 〉	통과 (0.02ms, 80.5MB)
Test 21 〉	통과 (0.03ms, 75.4MB)
Test 22 〉	통과 (0.03ms, 72.1MB)
Test 23 〉	통과 (0.02ms, 77.3MB)
Test 24 〉	통과 (0.02ms, 72.3MB)
Test 25 〉	통과 (0.03ms, 75.9MB)
Test 26 〉	실패 (0.03ms, 82.3MB)
Test 27 〉	실패 (0.03ms, 75.9MB)
Test 28 〉	실패 (0.02ms, 72.3MB)
Test 29 〉	실패 (0.03ms, 77.6MB)
Test 30 〉	실패 (0.02ms, 75.8MB)
Test 31 〉	실패 (0.03ms, 79.5MB)
Test 32 〉	실패 (0.02ms, 76.7MB)
Test 33 〉	실패 (0.02ms, 74.9MB)
Test 34 〉	실패 (0.02ms, 66.1MB)
Test 35 〉	실패 (0.02ms, 78MB)
Submission result
정확성: 62.9
Total score: 62.9 / 100.0

zzzㅋㅋ헐 생각해보니까 BigInteger 쓰면 되는거 아니묘???

BigInteger 사용한 풀이
import java.math.*;

class Solution {
    public BigInteger solution(int balls, int share) {
        
        return (factorial(balls) / (factorial(share) * factorial(balls - share)));
    }
    
    private BigInteger factorial(int n){
        if(n == 0 || n == 1){
            return 1;
        }
        return n * factorial(n -1);
    }
}

error 발생
1. BigInteger에서 연산은 multiply() 메소드와 divide() 메소드를 사용
2. 타입 변환 : int 타입을 BigInteger로 변환할 때는 BigInteger.valueOf() 메소드를 사용

다시 고쳐본 코드 => 근데 이거 너무 느린 것 같다...ㅠ
import java.math.BigInteger;

class Solution {
    public BigInteger solution(int balls, int share) {
        return factorial(balls).divide(factorial(share).multiply(factorial(balls - share)));
    }
    
    private BigInteger factorial(int n) {
        if (n == 0 || n == 1) {
            return BigInteger.valueOf(1);
        }
        return BigInteger.valueOf(n).multiply(factorial(n - 1));
    }
}

--------------
다른 풀이
class Solution {
    public int solution(int balls, int share) {
        
        double answer = 1;
        
        for(int i = 0; i < share; i++){
            answer *= (balls - i)/(i + 1);
        }
        return (int)answer;
    }
}

이 코드가 제일 깔끔한 것 같다.
---------------
class Solution {
    public long solution(int balls, int share) {
        share = Math.min(balls - share, share);

        if (share == 0)
            return 1;

        long result = solution(balls - 1, share - 1);
        result *= balls;
        result /= share;

        return result;
    }
}
그리고 이 코드....
n C r= (n-1) C (r) + (n-1) C (r-1) 
이 공식을 써서 숫자가 너무 커지지 않게 분할한 것 같다...
개쩌는 풀이 같다....
