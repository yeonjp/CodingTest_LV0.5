Description
첫 번째 분수의 분자와 분모를 뜻하는 numer1, denom1, 두 번째 분수의 분자와 분모를 뜻하는 numer2, denom2가 매개변수로 주어집니다. 두 분수를 더한 값을 기약 분수로 나타냈을 때 분자와 분모를 순서대로 담은 배열을 return 하도록 solution 함수를 완성해보세요.

제한사항
0 <numer1, denom1, numer2, denom2 < 1,000
입출력 예
numer1	denom1	numer2	denom2	result
1	2	3	4	[5, 4]
9	2	1	3	[29, 6]
입출력 예 설명
입출력 예 #1

1 / 2 + 3 / 4 = 5 / 4입니다. 따라서 [5, 4]를 return 합니다.
입출력 예 #2

9 / 2 + 1 / 3 = 29 / 6입니다. 따라서 [29, 6]을 return 합니다.

solution
class Solution {
    public int[] solution(int numer1, int denom1, int numer2, int denom2) {
        // 두 분수의 합을 구하기 위해 분모를 맞추고 계산
        int numer = (numer1 * denom2) + (numer2 * denom1);  // 분자 계산
        int denom = denom1 * denom2;  // 공통 분모 계산
        
        // 최대공약수를 구하기 위한 변수 초기화
        int max = 1;
        
        // 분자와 분모의 최대공약수 (GCD) 구하기
        for(int i = 1; i <= numer && i <= denom; i++){
            if(denom % i == 0 && numer % i == 0){
                max = i;  // 공약수 중 가장 큰 값을 max에 저장
            }
        }
        
        // 분자와 분모를 최대공약수로 나누어 기약 분수로 만들기
        numer = numer / max;
        denom = denom / max;
        
        // 결과를 배열에 담아 반환
        int[] answer = {numer, denom};
        
        return answer;
    }
}

로직의 상세 설명
루프 설정:

for(int i = 1; i <= numer && i <= denom; i++)는 i가 1부터 시작하여 numer와 denom 중 작은 값까지 반복됩니다.
즉, i는 1부터 시작해 numer와 denom 중 작은 값까지 하나씩 증가합니다.
공약수 찾기:

if(denom % i == 0 && numer % i == 0)는 i가 denom과 numer 모두를 나눌 수 있는지 확인하는 조건입니다.
denom % i == 0은 denom이 i로 나눠떨어지는지를 체크하는 조건입니다. 나눠떨어진다면, i는 denom의 약수입니다.
numer % i == 0은 numer이 i로 나눠떨어지는지를 체크하는 조건입니다. 나눠떨어진다면, i는 numer의 약수입니다.
두 조건이 모두 참이라면, i는 numer와 denom의 공약수입니다.
최대공약수 저장:

max = i;는 현재까지 발견된 공약수 중 가장 큰 값을 max 변수에 저장합니다.
루프가 끝날 때, max에는 numer와 denom의 최대공약수가 저장됩니다.
예제와 함께 이해하기
예를 들어, numer = 9이고 denom = 6이라고 가정해보겠습니다.

루프는 i = 1부터 i = 6까지 진행됩니다 (i는 numer와 denom 중 작은 값인 6까지 반복).

각 단계에서 조건을 체크합니다:

i = 1: 9 % 1 == 0, 6 % 1 == 0 → max = 1
i = 2: 9 % 2 != 0, 6 % 2 == 0 → 조건 불충족, max는 갱신되지 않음.
i = 3: 9 % 3 == 0, 6 % 3 == 0 → max = 3
i = 4: 9 % 4 != 0, 6 % 4 != 0 → 조건 불충족, max는 갱신되지 않음.
i = 5: 9 % 5 != 0, 6 % 5 != 0 → 조건 불충족, max는 갱신되지 않음.
i = 6: 9 % 6 != 0, 6 % 6 == 0 → 조건 불충족, max는 갱신되지 않음.
루프가 종료되면, max에는 3이 저장됩니다. 이 값이 numer = 9와 denom = 6의 최대공약수(GCD)입니다.

이 과정을 통해 두 숫자의 최대공약수를 구하여 분자와 분모를 나눠 기약 분수로 만들 수 있습니다.
